// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using UTO.restApi.Models;

#nullable disable

namespace UTO.restApi.Migrations
{
    [DbContext(typeof(APIDbContext))]
    [Migration("20211209144116_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("UTO.restApi.Models.Content", b =>
                {
                    b.Property<Guid>("ContentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ClassificationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ContentGenreId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ContentTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ContentId");

                    b.HasIndex("ClassificationId");

                    b.HasIndex("ContentGenreId");

                    b.HasIndex("ContentTypeId");

                    b.ToTable("Content");
                });

            modelBuilder.Entity("UTO.restApi.Models.ContentClassification", b =>
                {
                    b.Property<Guid>("ContectClassificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ContentClassificationName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ContectClassificationId");

                    b.ToTable("ContentClassification");
                });

            modelBuilder.Entity("UTO.restApi.Models.ContentGenre", b =>
                {
                    b.Property<Guid>("ContentGenreId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ContentGenreName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ContentGenreId");

                    b.ToTable("ContentGenre");
                });

            modelBuilder.Entity("UTO.restApi.Models.ContentType", b =>
                {
                    b.Property<Guid>("ContentTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ContentTypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ContentTypeId");

                    b.ToTable("ContentType");
                });

            modelBuilder.Entity("UTO.restApi.Models.Member", b =>
                {
                    b.Property<Guid>("MemberId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MemberTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("VigencyMember")
                        .HasColumnType("datetime2");

                    b.HasKey("MemberId");

                    b.HasIndex("MemberTypeId");

                    b.ToTable("Member");
                });

            modelBuilder.Entity("UTO.restApi.Models.MemberType", b =>
                {
                    b.Property<Guid>("MemberTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("MemberName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MemberTypeId");

                    b.ToTable("MemberType");
                });

            modelBuilder.Entity("UTO.restApi.Models.MemberTypeContent", b =>
                {
                    b.Property<int>("MemberTypeContentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MemberTypeContentId"), 1L, 1);

                    b.Property<Guid>("ContentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MemberTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("MemberTypeContentId");

                    b.HasIndex("ContentId");

                    b.HasIndex("MemberTypeId");

                    b.ToTable("MemberTypeContent");
                });

            modelBuilder.Entity("UTO.restApi.Models.User", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("EmailUser")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("MemberId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PassUser")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneUser")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.HasIndex("MemberId")
                        .IsUnique();

                    b.ToTable("User");
                });

            modelBuilder.Entity("UTO.restApi.Models.Content", b =>
                {
                    b.HasOne("UTO.restApi.Models.ContentClassification", "Classification")
                        .WithMany()
                        .HasForeignKey("ClassificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UTO.restApi.Models.ContentGenre", "ContentGenre")
                        .WithMany()
                        .HasForeignKey("ContentGenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UTO.restApi.Models.ContentType", "ContentType")
                        .WithMany()
                        .HasForeignKey("ContentTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Classification");

                    b.Navigation("ContentGenre");

                    b.Navigation("ContentType");
                });

            modelBuilder.Entity("UTO.restApi.Models.Member", b =>
                {
                    b.HasOne("UTO.restApi.Models.MemberType", "MemberType")
                        .WithMany()
                        .HasForeignKey("MemberTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MemberType");
                });

            modelBuilder.Entity("UTO.restApi.Models.MemberTypeContent", b =>
                {
                    b.HasOne("UTO.restApi.Models.Content", "Content")
                        .WithMany()
                        .HasForeignKey("ContentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UTO.restApi.Models.MemberType", "MemberType")
                        .WithMany()
                        .HasForeignKey("MemberTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Content");

                    b.Navigation("MemberType");
                });

            modelBuilder.Entity("UTO.restApi.Models.User", b =>
                {
                    b.HasOne("UTO.restApi.Models.Member", "Member")
                        .WithOne("User")
                        .HasForeignKey("UTO.restApi.Models.User", "MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Member");
                });

            modelBuilder.Entity("UTO.restApi.Models.Member", b =>
                {
                    b.Navigation("User");
                });
#pragma warning restore 612, 618
        }
    }
}
